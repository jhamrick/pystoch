#!/usr/bin/python

import argparse
import compile as c
import os
from stack import Stack
import sys
import tempfile
import traceback

def pystochfunc(f):
    f.random = True
    return f

class PyStochObj(object):

    def __init__(self):
        self.module_stack = Stack()
        self.class_stack = Stack()
        self.func_stack = Stack()
        self.line_stack = Stack()
        self.loop_stack = Stack()
    
    def call(self, func, *args, **kwargs):
        if hasattr(func, "random") and func.random:
            kwargs['PYSTOCHOBJ'] = self
            print "Calling %s..." % func.__name__
            self.print_trace()
            
        return func(*args, **kwargs)

    def print_trace(self):
        print "Module:", str(self.module_stack)
        print "Class: ", str(self.class_stack)
        print "Func:  ", str(self.func_stack)
        print "Line:  ", str(self.line_stack)
        print "Loop:  ", str(self.loop_stack)
        
def run(prog, args):
    PYSTOCHOBJ = PyStochObj()

    filename = None
    sys.argv = args
    
    if prog.endswith('.pystoch'):
        filename = prog
    else:
        source = c.pystoch_compile(prog)
        temp = tempfile.NamedTemporaryFile(
            prefix='tmp_', suffix='.pystoch', dir='/tmp', delete=False)
        temp.write(source)
        temp.close()
        filename = temp.name

    try:
        execfile(temp.name, {'PYSTOCHOBJ': PYSTOCHOBJ})
    except:
        traceback.print_exc(file=sys.stderr)
    finally:
        os.remove(temp.name)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run a PyStoch program.')
    parser.add_argument('program', metavar='file', type=str, nargs=1,
                        help='the PyStoch file to execute')
    parser.add_argument('arguments', metavar='arg', type=str, nargs='*',
                        help='arguments to the PyStoch program')

    args = parser.parse_args()
    run(args.program[0], args.arguments)
    
